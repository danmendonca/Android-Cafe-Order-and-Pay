/**
 * Acme Cafe App
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 * <p>
 * OpenAPI spec version: 0.0.1
 * <p>
 * <p>
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import io.swagger.client.model.Blacklist;
import io.swagger.client.model.ErrorResponse;
import io.swagger.client.model.Product;
import io.swagger.client.model.RequestPut;
import io.swagger.client.model.Request;
import io.swagger.client.model.Costumer;
import io.swagger.client.model.Blacklists;
import io.swagger.client.model.Consult;
import io.swagger.client.model.Costumers;
import io.swagger.client.model.Products;
import io.swagger.client.model.HelloWorldResponse;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class DefaultApi {
    String basePath = "https://cmov1.herokuapp.com/api";
    ApiInvoker apiInvoker = ApiInvoker.getInstance();

    public void addHeader(String key, String value) {
        getInvoker().addDefaultHeader(key, value);
    }

    public ApiInvoker getInvoker() {
        return apiInvoker;
    }

    public void setBasePath(String basePath) {
        this.basePath = basePath;
    }

    public String getBasePath() {
        return basePath;
    }

    /**
     *
     * Adds a costumer to the blacklist
     * @param costumerUuid
     * @param myId
     * @param myPw
     * @return Blacklist
     */
    public Blacklist addToBlacklist(String costumerUuid, String myId, String myPw) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
        Object postBody = null;

        // verify the required parameter 'costumerUuid' is set
        if (costumerUuid == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'costumerUuid' when calling addToBlacklist",
                    new ApiException(400, "Missing the required parameter 'costumerUuid' when calling addToBlacklist"));
        }


        // create path and map variables
        String path = "/blacklists".replaceAll("\\{format\\}", "json");

        // query params
        List<Pair> queryParams = new ArrayList<Pair>();
        // header params
        Map<String, String> headerParams = new HashMap<String, String>();
        // form params
        Map<String, String> formParams = new HashMap<String, String>();


        String[] contentTypes = {
                "application/json"
        };
        String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();

            if (costumerUuid != null) {
                localVarBuilder.addTextBody("costumerUuid", ApiInvoker.parameterToString(costumerUuid), ApiInvoker.TEXT_PLAIN_UTF8);
            }

            if (myId != null) {
                localVarBuilder.addTextBody("myId", ApiInvoker.parameterToString(myId), ApiInvoker.TEXT_PLAIN_UTF8);
            }

            if (myPw != null) {
                localVarBuilder.addTextBody("myPw", ApiInvoker.parameterToString(myPw), ApiInvoker.TEXT_PLAIN_UTF8);
            }


            HttpEntity httpEntity = localVarBuilder.build();
            postBody = httpEntity;
        } else {
            // normal form params
            formParams.put("costumerUuid", ApiInvoker.parameterToString(costumerUuid));
            formParams.put("myId", ApiInvoker.parameterToString(myId));
            formParams.put("myPw", ApiInvoker.parameterToString(myPw));
        }

        String[] authNames = new String[]{};

        try {
            String localVarResponse = apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
            if (localVarResponse != null) {
                return (Blacklist) ApiInvoker.deserialize(localVarResponse, "", Blacklist.class);
            } else {
                return null;
            }
        } catch (ApiException ex) {
            throw ex;
        } catch (InterruptedException ex) {
            throw ex;
        } catch (ExecutionException ex) {
            if (ex.getCause() instanceof VolleyError) {
                VolleyError volleyError = (VolleyError) ex.getCause();
                if (volleyError.networkResponse != null) {
                    throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
                }
            }
            throw ex;
        } catch (TimeoutException ex) {
            throw ex;
        }
    }

    /**
     *
     * Adds a costumer to the blacklist
     * @param costumerUuid    * @param myId    * @param myPw
     */
    public void addToBlacklist(String costumerUuid, String myId, String myPw, final Response.Listener<Blacklist> responseListener, final Response.ErrorListener errorListener) {
        Object postBody = null;


        // verify the required parameter 'costumerUuid' is set
        if (costumerUuid == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'costumerUuid' when calling addToBlacklist",
                    new ApiException(400, "Missing the required parameter 'costumerUuid' when calling addToBlacklist"));
        }


        // create path and map variables
        String path = "/blacklists".replaceAll("\\{format\\}", "json");

        // query params
        List<Pair> queryParams = new ArrayList<Pair>();
        // header params
        Map<String, String> headerParams = new HashMap<String, String>();
        // form params
        Map<String, String> formParams = new HashMap<String, String>();


        String[] contentTypes = {
                "application/json"
        };
        String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();

            if (costumerUuid != null) {
                localVarBuilder.addTextBody("costumerUuid", ApiInvoker.parameterToString(costumerUuid), ApiInvoker.TEXT_PLAIN_UTF8);
            }

            if (myId != null) {
                localVarBuilder.addTextBody("myId", ApiInvoker.parameterToString(myId), ApiInvoker.TEXT_PLAIN_UTF8);
            }

            if (myPw != null) {
                localVarBuilder.addTextBody("myPw", ApiInvoker.parameterToString(myPw), ApiInvoker.TEXT_PLAIN_UTF8);
            }


            HttpEntity httpEntity = localVarBuilder.build();
            postBody = httpEntity;
        } else {
            // normal form params
            formParams.put("costumerUuid", ApiInvoker.parameterToString(costumerUuid));
            formParams.put("myId", ApiInvoker.parameterToString(myId));
            formParams.put("myPw", ApiInvoker.parameterToString(myPw));
        }

        String[] authNames = new String[]{};

        try {
            apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
                    new Response.Listener<String>() {
                        @Override
                        public void onResponse(String localVarResponse) {
                            try {
                                responseListener.onResponse((Blacklist) ApiInvoker.deserialize(localVarResponse, "", Blacklist.class));
                            } catch (ApiException exception) {
                                errorListener.onErrorResponse(new VolleyError(exception));
                            }
                        }
                    }, new Response.ErrorListener() {
                        @Override
                        public void onErrorResponse(VolleyError error) {
                            errorListener.onErrorResponse(error);
                        }
                    });
        } catch (ApiException ex) {
            errorListener.onErrorResponse(new VolleyError(ex));
        }
    }

    /**
     *
     * Creates a product
     * @param name
     * @param myId
     * @param myPw
     * @param unitprice
     * @param active
     * @return Product
     */
    public Product createProduct(String name, String myId, String myPw, Float unitprice, Boolean active) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
        Object postBody = null;

        // verify the required parameter 'name' is set
        if (name == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'name' when calling createProduct",
                    new ApiException(400, "Missing the required parameter 'name' when calling createProduct"));
        }


        // create path and map variables
        String path = "/products".replaceAll("\\{format\\}", "json");

        // query params
        List<Pair> queryParams = new ArrayList<Pair>();
        // header params
        Map<String, String> headerParams = new HashMap<String, String>();
        // form params
        Map<String, String> formParams = new HashMap<String, String>();


        String[] contentTypes = {
                "application/json"
        };
        String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();

            if (myId != null) {
                localVarBuilder.addTextBody("myId", ApiInvoker.parameterToString(myId), ApiInvoker.TEXT_PLAIN_UTF8);
            }

            if (myPw != null) {
                localVarBuilder.addTextBody("myPw", ApiInvoker.parameterToString(myPw), ApiInvoker.TEXT_PLAIN_UTF8);
            }

            if (name != null) {
                localVarBuilder.addTextBody("name", ApiInvoker.parameterToString(name), ApiInvoker.TEXT_PLAIN_UTF8);
            }

            if (unitprice != null) {
                localVarBuilder.addTextBody("unitprice", ApiInvoker.parameterToString(unitprice), ApiInvoker.TEXT_PLAIN_UTF8);
            }

            if (active != null) {
                localVarBuilder.addTextBody("active", ApiInvoker.parameterToString(active), ApiInvoker.TEXT_PLAIN_UTF8);
            }


            HttpEntity httpEntity = localVarBuilder.build();
            postBody = httpEntity;
        } else {
            // normal form params
            formParams.put("myId", ApiInvoker.parameterToString(myId));
            formParams.put("myPw", ApiInvoker.parameterToString(myPw));
            formParams.put("name", ApiInvoker.parameterToString(name));
            formParams.put("unitprice", ApiInvoker.parameterToString(unitprice));
            formParams.put("active", ApiInvoker.parameterToString(active));
        }

        String[] authNames = new String[]{};

        try {
            String localVarResponse = apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
            if (localVarResponse != null) {
                return (Product) ApiInvoker.deserialize(localVarResponse, "", Product.class);
            } else {
                return null;
            }
        } catch (ApiException ex) {
            throw ex;
        } catch (InterruptedException ex) {
            throw ex;
        } catch (ExecutionException ex) {
            if (ex.getCause() instanceof VolleyError) {
                VolleyError volleyError = (VolleyError) ex.getCause();
                if (volleyError.networkResponse != null) {
                    throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
                }
            }
            throw ex;
        } catch (TimeoutException ex) {
            throw ex;
        }
    }

    /**
     *
     * Creates a product
     * @param name    * @param myId    * @param myPw    * @param unitprice    * @param active
     */
    public void createProduct(String name, String myId, String myPw, Float unitprice, Boolean active, final Response.Listener<Product> responseListener, final Response.ErrorListener errorListener) {
        Object postBody = null;


        // verify the required parameter 'name' is set
        if (name == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'name' when calling createProduct",
                    new ApiException(400, "Missing the required parameter 'name' when calling createProduct"));
        }


        // create path and map variables
        String path = "/products".replaceAll("\\{format\\}", "json");

        // query params
        List<Pair> queryParams = new ArrayList<Pair>();
        // header params
        Map<String, String> headerParams = new HashMap<String, String>();
        // form params
        Map<String, String> formParams = new HashMap<String, String>();


        String[] contentTypes = {
                "application/json"
        };
        String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();

            if (myId != null) {
                localVarBuilder.addTextBody("myId", ApiInvoker.parameterToString(myId), ApiInvoker.TEXT_PLAIN_UTF8);
            }

            if (myPw != null) {
                localVarBuilder.addTextBody("myPw", ApiInvoker.parameterToString(myPw), ApiInvoker.TEXT_PLAIN_UTF8);
            }

            if (name != null) {
                localVarBuilder.addTextBody("name", ApiInvoker.parameterToString(name), ApiInvoker.TEXT_PLAIN_UTF8);
            }

            if (unitprice != null) {
                localVarBuilder.addTextBody("unitprice", ApiInvoker.parameterToString(unitprice), ApiInvoker.TEXT_PLAIN_UTF8);
            }

            if (active != null) {
                localVarBuilder.addTextBody("active", ApiInvoker.parameterToString(active), ApiInvoker.TEXT_PLAIN_UTF8);
            }


            HttpEntity httpEntity = localVarBuilder.build();
            postBody = httpEntity;
        } else {
            // normal form params
            formParams.put("myId", ApiInvoker.parameterToString(myId));
            formParams.put("myPw", ApiInvoker.parameterToString(myPw));
            formParams.put("name", ApiInvoker.parameterToString(name));
            formParams.put("unitprice", ApiInvoker.parameterToString(unitprice));
            formParams.put("active", ApiInvoker.parameterToString(active));
        }

        String[] authNames = new String[]{};

        try {
            apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
                    new Response.Listener<String>() {
                        @Override
                        public void onResponse(String localVarResponse) {
                            try {
                                responseListener.onResponse((Product) ApiInvoker.deserialize(localVarResponse, "", Product.class));
                            } catch (ApiException exception) {
                                errorListener.onErrorResponse(new VolleyError(exception));
                            }
                        }
                    }, new Response.ErrorListener() {
                        @Override
                        public void onErrorResponse(VolleyError error) {
                            errorListener.onErrorResponse(error);
                        }
                    });
        } catch (ApiException ex) {
            errorListener.onErrorResponse(new VolleyError(ex));
        }
    }

    /**
     *
     * Creates a new request for a costumer
     * @param request
     * @return Request
     */
    public Request createRequest(RequestPut request) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
        Object postBody = request;

        // verify the required parameter 'request' is set
        if (request == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'request' when calling createRequest",
                    new ApiException(400, "Missing the required parameter 'request' when calling createRequest"));
        }


        // create path and map variables
        String path = "/requests".replaceAll("\\{format\\}", "json");

        // query params
        List<Pair> queryParams = new ArrayList<Pair>();
        // header params
        Map<String, String> headerParams = new HashMap<String, String>();
        // form params
        Map<String, String> formParams = new HashMap<String, String>();


        String[] contentTypes = {
                "application/json"
        };
        String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


            HttpEntity httpEntity = localVarBuilder.build();
            postBody = httpEntity;
        } else {
            // normal form params
        }

        String[] authNames = new String[]{};

        try {
            String localVarResponse = apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
            if (localVarResponse != null) {
                return (Request) ApiInvoker.deserialize(localVarResponse, "", Request.class);
            } else {
                return null;
            }
        } catch (ApiException ex) {
            throw ex;
        } catch (InterruptedException ex) {
            throw ex;
        } catch (ExecutionException ex) {
            if (ex.getCause() instanceof VolleyError) {
                VolleyError volleyError = (VolleyError) ex.getCause();
                if (volleyError.networkResponse != null) {
                    throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
                }
            }
            throw ex;
        } catch (TimeoutException ex) {
            throw ex;
        }
    }

    /**
     *
     * Creates a new request for a costumer
     * @param request
     */
    public void createRequest(RequestPut request, final Response.Listener<Request> responseListener, final Response.ErrorListener errorListener) {
        Object postBody = request;


        // verify the required parameter 'request' is set
        if (request == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'request' when calling createRequest",
                    new ApiException(400, "Missing the required parameter 'request' when calling createRequest"));
        }


        // create path and map variables
        String path = "/requests".replaceAll("\\{format\\}", "json");

        // query params
        List<Pair> queryParams = new ArrayList<Pair>();
        // header params
        Map<String, String> headerParams = new HashMap<String, String>();
        // form params
        Map<String, String> formParams = new HashMap<String, String>();


        String[] contentTypes = {
                "application/json"
        };
        String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


            HttpEntity httpEntity = localVarBuilder.build();
            postBody = httpEntity;
        } else {
            // normal form params
        }

        String[] authNames = new String[]{};

        try {
            apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
                    new Response.Listener<String>() {
                        @Override
                        public void onResponse(String localVarResponse) {
                            try {
                                responseListener.onResponse((Request) ApiInvoker.deserialize(localVarResponse, "", Request.class));
                            } catch (ApiException exception) {
                                errorListener.onErrorResponse(new VolleyError(exception));
                            }
                        }
                    }, new Response.ErrorListener() {
                        @Override
                        public void onErrorResponse(VolleyError error) {
                            errorListener.onErrorResponse(error);
                        }
                    });
        } catch (ApiException ex) {
            errorListener.onErrorResponse(new VolleyError(ex));
        }
    }

    /**
     *
     * Creation of new user
     * @param name
     * @param username
     * @param password
     * @param creditcardnumber
     * @param creditcarddate
     * @return Costumer
     */
    public Costumer createUser(String name, String username, String password, String creditcardnumber, String creditcarddate) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
        Object postBody = null;

        // verify the required parameter 'name' is set
        if (name == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'name' when calling createUser",
                    new ApiException(400, "Missing the required parameter 'name' when calling createUser"));
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'username' when calling createUser",
                    new ApiException(400, "Missing the required parameter 'username' when calling createUser"));
        }

        // verify the required parameter 'password' is set
        if (password == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'password' when calling createUser",
                    new ApiException(400, "Missing the required parameter 'password' when calling createUser"));
        }

        // verify the required parameter 'creditcardnumber' is set
        if (creditcardnumber == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'creditcardnumber' when calling createUser",
                    new ApiException(400, "Missing the required parameter 'creditcardnumber' when calling createUser"));
        }

        // verify the required parameter 'creditcarddate' is set
        if (creditcarddate == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'creditcarddate' when calling createUser",
                    new ApiException(400, "Missing the required parameter 'creditcarddate' when calling createUser"));
        }


        // create path and map variables
        String path = "/costumers".replaceAll("\\{format\\}", "json");

        // query params
        List<Pair> queryParams = new ArrayList<Pair>();
        // header params
        Map<String, String> headerParams = new HashMap<String, String>();
        // form params
        Map<String, String> formParams = new HashMap<String, String>();


        String[] contentTypes = {
                "application/json"
        };
        String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();

            if (name != null) {
                localVarBuilder.addTextBody("name", ApiInvoker.parameterToString(name), ApiInvoker.TEXT_PLAIN_UTF8);
            }

            if (username != null) {
                localVarBuilder.addTextBody("username", ApiInvoker.parameterToString(username), ApiInvoker.TEXT_PLAIN_UTF8);
            }

            if (password != null) {
                localVarBuilder.addTextBody("password", ApiInvoker.parameterToString(password), ApiInvoker.TEXT_PLAIN_UTF8);
            }

            if (creditcardnumber != null) {
                localVarBuilder.addTextBody("creditcardnumber", ApiInvoker.parameterToString(creditcardnumber), ApiInvoker.TEXT_PLAIN_UTF8);
            }

            if (creditcarddate != null) {
                localVarBuilder.addTextBody("creditcarddate", ApiInvoker.parameterToString(creditcarddate), ApiInvoker.TEXT_PLAIN_UTF8);
            }


            HttpEntity httpEntity = localVarBuilder.build();
            postBody = httpEntity;
        } else {
            // normal form params
            formParams.put("name", ApiInvoker.parameterToString(name));
            formParams.put("username", ApiInvoker.parameterToString(username));
            formParams.put("password", ApiInvoker.parameterToString(password));
            formParams.put("creditcardnumber", ApiInvoker.parameterToString(creditcardnumber));
            formParams.put("creditcarddate", ApiInvoker.parameterToString(creditcarddate));
        }

        String[] authNames = new String[]{};

        try {
            String localVarResponse = apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
            if (localVarResponse != null) {
                return (Costumer) ApiInvoker.deserialize(localVarResponse, "", Costumer.class);
            } else {
                return null;
            }
        } catch (ApiException ex) {
            throw ex;
        } catch (InterruptedException ex) {
            throw ex;
        } catch (ExecutionException ex) {
            if (ex.getCause() instanceof VolleyError) {
                VolleyError volleyError = (VolleyError) ex.getCause();
                if (volleyError.networkResponse != null) {
                    throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
                }
            }
            throw ex;
        } catch (TimeoutException ex) {
            throw ex;
        }
    }

    /**
     *
     * Creation of new user
     * @param name    * @param username    * @param password    * @param creditcardnumber    * @param creditcarddate
     */
    public void createUser(String name, String username, String password, String creditcardnumber, String creditcarddate, final Response.Listener<Costumer> responseListener, final Response.ErrorListener errorListener) {
        Object postBody = null;


        // verify the required parameter 'name' is set
        if (name == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'name' when calling createUser",
                    new ApiException(400, "Missing the required parameter 'name' when calling createUser"));
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'username' when calling createUser",
                    new ApiException(400, "Missing the required parameter 'username' when calling createUser"));
        }

        // verify the required parameter 'password' is set
        if (password == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'password' when calling createUser",
                    new ApiException(400, "Missing the required parameter 'password' when calling createUser"));
        }

        // verify the required parameter 'creditcardnumber' is set
        if (creditcardnumber == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'creditcardnumber' when calling createUser",
                    new ApiException(400, "Missing the required parameter 'creditcardnumber' when calling createUser"));
        }

        // verify the required parameter 'creditcarddate' is set
        if (creditcarddate == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'creditcarddate' when calling createUser",
                    new ApiException(400, "Missing the required parameter 'creditcarddate' when calling createUser"));
        }


        // create path and map variables
        String path = "/costumers".replaceAll("\\{format\\}", "json");

        // query params
        List<Pair> queryParams = new ArrayList<Pair>();
        // header params
        Map<String, String> headerParams = new HashMap<String, String>();
        // form params
        Map<String, String> formParams = new HashMap<String, String>();


        String[] contentTypes = {
                "application/json"
        };
        String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();

            if (name != null) {
                localVarBuilder.addTextBody("name", ApiInvoker.parameterToString(name), ApiInvoker.TEXT_PLAIN_UTF8);
            }

            if (username != null) {
                localVarBuilder.addTextBody("username", ApiInvoker.parameterToString(username), ApiInvoker.TEXT_PLAIN_UTF8);
            }

            if (password != null) {
                localVarBuilder.addTextBody("password", ApiInvoker.parameterToString(password), ApiInvoker.TEXT_PLAIN_UTF8);
            }

            if (creditcardnumber != null) {
                localVarBuilder.addTextBody("creditcardnumber", ApiInvoker.parameterToString(creditcardnumber), ApiInvoker.TEXT_PLAIN_UTF8);
            }

            if (creditcarddate != null) {
                localVarBuilder.addTextBody("creditcarddate", ApiInvoker.parameterToString(creditcarddate), ApiInvoker.TEXT_PLAIN_UTF8);
            }


            HttpEntity httpEntity = localVarBuilder.build();
            postBody = httpEntity;
        } else {
            // normal form params
            formParams.put("name", ApiInvoker.parameterToString(name));
            formParams.put("username", ApiInvoker.parameterToString(username));
            formParams.put("password", ApiInvoker.parameterToString(password));
            formParams.put("creditcardnumber", ApiInvoker.parameterToString(creditcardnumber));
            formParams.put("creditcarddate", ApiInvoker.parameterToString(creditcarddate));
        }

        String[] authNames = new String[]{};

        try {
            apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
                    new Response.Listener<String>() {
                        @Override
                        public void onResponse(String localVarResponse) {
                            try {
                                responseListener.onResponse((Costumer) ApiInvoker.deserialize(localVarResponse, "", Costumer.class));
                            } catch (ApiException exception) {
                                errorListener.onErrorResponse(new VolleyError(exception));
                            }
                        }
                    }, new Response.ErrorListener() {
                        @Override
                        public void onErrorResponse(VolleyError error) {
                            errorListener.onErrorResponse(error);
                        }
                    });
        } catch (ApiException ex) {
            errorListener.onErrorResponse(new VolleyError(ex));
        }
    }

    /**
     *
     * Returns a collection
     * @return Blacklists
     */
    public Blacklists getBlacklisted() throws TimeoutException, ExecutionException, InterruptedException, ApiException {
        Object postBody = null;


        // create path and map variables
        String path = "/blacklists".replaceAll("\\{format\\}", "json");

        // query params
        List<Pair> queryParams = new ArrayList<Pair>();
        // header params
        Map<String, String> headerParams = new HashMap<String, String>();
        // form params
        Map<String, String> formParams = new HashMap<String, String>();


        String[] contentTypes = {
                "application/json"
        };
        String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


            HttpEntity httpEntity = localVarBuilder.build();
            postBody = httpEntity;
        } else {
            // normal form params
        }

        String[] authNames = new String[]{};

        try {
            String localVarResponse = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
            if (localVarResponse != null) {
                return (Blacklists) ApiInvoker.deserialize(localVarResponse, "", Blacklists.class);
            } else {
                return null;
            }
        } catch (ApiException ex) {
            throw ex;
        } catch (InterruptedException ex) {
            throw ex;
        } catch (ExecutionException ex) {
            if (ex.getCause() instanceof VolleyError) {
                VolleyError volleyError = (VolleyError) ex.getCause();
                if (volleyError.networkResponse != null) {
                    throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
                }
            }
            throw ex;
        } catch (TimeoutException ex) {
            throw ex;
        }
    }

    /**
     *
     * Returns a collection

     */
    public void getBlacklisted(final Response.Listener<Blacklists> responseListener, final Response.ErrorListener errorListener) {
        Object postBody = null;


        // create path and map variables
        String path = "/blacklists".replaceAll("\\{format\\}", "json");

        // query params
        List<Pair> queryParams = new ArrayList<Pair>();
        // header params
        Map<String, String> headerParams = new HashMap<String, String>();
        // form params
        Map<String, String> formParams = new HashMap<String, String>();


        String[] contentTypes = {
                "application/json"
        };
        String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


            HttpEntity httpEntity = localVarBuilder.build();
            postBody = httpEntity;
        } else {
            // normal form params
        }

        String[] authNames = new String[]{};

        try {
            apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
                    new Response.Listener<String>() {
                        @Override
                        public void onResponse(String localVarResponse) {
                            try {
                                responseListener.onResponse((Blacklists) ApiInvoker.deserialize(localVarResponse, "", Blacklists.class));
                            } catch (ApiException exception) {
                                errorListener.onErrorResponse(new VolleyError(exception));
                            }
                        }
                    }, new Response.ErrorListener() {
                        @Override
                        public void onErrorResponse(VolleyError error) {
                            errorListener.onErrorResponse(error);
                        }
                    });
        } catch (ApiException ex) {
            errorListener.onErrorResponse(new VolleyError(ex));
        }
    }

    /**
     *
     * Returns a request collection of a costumer given its uuid and pin
     * @param costumerUuid
     * @param pin
     * @return Consult
     */
    public Consult getCostumerRequests(String costumerUuid, String pin) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
        Object postBody = null;

        // verify the required parameter 'costumerUuid' is set
        if (costumerUuid == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'costumerUuid' when calling getCostumerRequests",
                    new ApiException(400, "Missing the required parameter 'costumerUuid' when calling getCostumerRequests"));
        }

        // verify the required parameter 'pin' is set
        if (pin == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'pin' when calling getCostumerRequests",
                    new ApiException(400, "Missing the required parameter 'pin' when calling getCostumerRequests"));
        }


        // create path and map variables
        String path = "/requests".replaceAll("\\{format\\}", "json");

        // query params
        List<Pair> queryParams = new ArrayList<Pair>();
        // header params
        Map<String, String> headerParams = new HashMap<String, String>();
        // form params
        Map<String, String> formParams = new HashMap<String, String>();


        String[] contentTypes = {
                "application/json"
        };
        String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();

            if (costumerUuid != null) {
                localVarBuilder.addTextBody("costumerUuid", ApiInvoker.parameterToString(costumerUuid), ApiInvoker.TEXT_PLAIN_UTF8);
            }

            if (pin != null) {
                localVarBuilder.addTextBody("pin", ApiInvoker.parameterToString(pin), ApiInvoker.TEXT_PLAIN_UTF8);
            }


            HttpEntity httpEntity = localVarBuilder.build();
            postBody = httpEntity;
        } else {
            // normal form params
            formParams.put("costumerUuid", ApiInvoker.parameterToString(costumerUuid));
            formParams.put("pin", ApiInvoker.parameterToString(pin));
        }

        String[] authNames = new String[]{};

        try {
            String localVarResponse = apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
            if (localVarResponse != null) {
                return (Consult) ApiInvoker.deserialize(localVarResponse, "", Consult.class);
            } else {
                return null;
            }
        } catch (ApiException ex) {
            throw ex;
        } catch (InterruptedException ex) {
            throw ex;
        } catch (ExecutionException ex) {
            if (ex.getCause() instanceof VolleyError) {
                VolleyError volleyError = (VolleyError) ex.getCause();
                if (volleyError.networkResponse != null) {
                    throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
                }
            }
            throw ex;
        } catch (TimeoutException ex) {
            throw ex;
        }
    }

    /**
     *
     * Returns a request collection of a costumer given its uuid and pin
     * @param costumerUuid    * @param pin
     */
    public void getCostumerRequests(String costumerUuid, String pin, final Response.Listener<Consult> responseListener, final Response.ErrorListener errorListener) {
        Object postBody = null;


        // verify the required parameter 'costumerUuid' is set
        if (costumerUuid == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'costumerUuid' when calling getCostumerRequests",
                    new ApiException(400, "Missing the required parameter 'costumerUuid' when calling getCostumerRequests"));
        }

        // verify the required parameter 'pin' is set
        if (pin == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'pin' when calling getCostumerRequests",
                    new ApiException(400, "Missing the required parameter 'pin' when calling getCostumerRequests"));
        }


        // create path and map variables
        String path = "/requests".replaceAll("\\{format\\}", "json");

        // query params
        List<Pair> queryParams = new ArrayList<Pair>();
        // header params
        Map<String, String> headerParams = new HashMap<String, String>();
        // form params
        Map<String, String> formParams = new HashMap<String, String>();


        String[] contentTypes = {
                "application/json"
        };
        String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();

            if (costumerUuid != null) {
                localVarBuilder.addTextBody("costumerUuid", ApiInvoker.parameterToString(costumerUuid), ApiInvoker.TEXT_PLAIN_UTF8);
            }

            if (pin != null) {
                localVarBuilder.addTextBody("pin", ApiInvoker.parameterToString(pin), ApiInvoker.TEXT_PLAIN_UTF8);
            }


            HttpEntity httpEntity = localVarBuilder.build();
            postBody = httpEntity;
        } else {
            // normal form params
            formParams.put("costumerUuid", ApiInvoker.parameterToString(costumerUuid));
            formParams.put("pin", ApiInvoker.parameterToString(pin));
        }

        String[] authNames = new String[]{};

        try {
            apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
                    new Response.Listener<String>() {
                        @Override
                        public void onResponse(String localVarResponse) {
                            try {
                                responseListener.onResponse((Consult) ApiInvoker.deserialize(localVarResponse, "", Consult.class));
                            } catch (ApiException exception) {
                                errorListener.onErrorResponse(new VolleyError(exception));
                            }
                        }
                    }, new Response.ErrorListener() {
                        @Override
                        public void onErrorResponse(VolleyError error) {
                            errorListener.onErrorResponse(error);
                        }
                    });
        } catch (ApiException ex) {
            errorListener.onErrorResponse(new VolleyError(ex));
        }
    }

    /**
     *
     * Returns an array of users
     * @return Costumers
     */
    public Costumers getCostumers() throws TimeoutException, ExecutionException, InterruptedException, ApiException {
        Object postBody = null;


        // create path and map variables
        String path = "/costumers".replaceAll("\\{format\\}", "json");

        // query params
        List<Pair> queryParams = new ArrayList<Pair>();
        // header params
        Map<String, String> headerParams = new HashMap<String, String>();
        // form params
        Map<String, String> formParams = new HashMap<String, String>();


        String[] contentTypes = {
                "application/json"
        };
        String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


            HttpEntity httpEntity = localVarBuilder.build();
            postBody = httpEntity;
        } else {
            // normal form params
        }

        String[] authNames = new String[]{};

        try {
            String localVarResponse = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
            if (localVarResponse != null) {
                return (Costumers) ApiInvoker.deserialize(localVarResponse, "", Costumers.class);
            } else {
                return null;
            }
        } catch (ApiException ex) {
            throw ex;
        } catch (InterruptedException ex) {
            throw ex;
        } catch (ExecutionException ex) {
            if (ex.getCause() instanceof VolleyError) {
                VolleyError volleyError = (VolleyError) ex.getCause();
                if (volleyError.networkResponse != null) {
                    throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
                }
            }
            throw ex;
        } catch (TimeoutException ex) {
            throw ex;
        }
    }

    /**
     *
     * Returns an array of users

     */
    public void getCostumers(final Response.Listener<Costumers> responseListener, final Response.ErrorListener errorListener) {
        Object postBody = null;


        // create path and map variables
        String path = "/costumers".replaceAll("\\{format\\}", "json");

        // query params
        List<Pair> queryParams = new ArrayList<Pair>();
        // header params
        Map<String, String> headerParams = new HashMap<String, String>();
        // form params
        Map<String, String> formParams = new HashMap<String, String>();


        String[] contentTypes = {
                "application/json"
        };
        String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


            HttpEntity httpEntity = localVarBuilder.build();
            postBody = httpEntity;
        } else {
            // normal form params
        }

        String[] authNames = new String[]{};

        try {
            apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
                    new Response.Listener<String>() {
                        @Override
                        public void onResponse(String localVarResponse) {
                            try {
                                responseListener.onResponse((Costumers) ApiInvoker.deserialize(localVarResponse, "", Costumers.class));
                            } catch (ApiException exception) {
                                errorListener.onErrorResponse(new VolleyError(exception));
                            }
                        }
                    }, new Response.ErrorListener() {
                        @Override
                        public void onErrorResponse(VolleyError error) {
                            errorListener.onErrorResponse(error);
                        }
                    });
        } catch (ApiException ex) {
            errorListener.onErrorResponse(new VolleyError(ex));
        }
    }

    /**
     *
     * Returns an array of products
     * @return Products
     */
    public Products getProducts() throws TimeoutException, ExecutionException, InterruptedException, ApiException {
        Object postBody = null;


        // create path and map variables
        String path = "/products".replaceAll("\\{format\\}", "json");

        // query params
        List<Pair> queryParams = new ArrayList<Pair>();
        // header params
        Map<String, String> headerParams = new HashMap<String, String>();
        // form params
        Map<String, String> formParams = new HashMap<String, String>();


        String[] contentTypes = {
                "application/json"
        };
        String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


            HttpEntity httpEntity = localVarBuilder.build();
            postBody = httpEntity;
        } else {
            // normal form params
        }

        String[] authNames = new String[]{};

        try {
            String localVarResponse = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
            if (localVarResponse != null) {
                return (Products) ApiInvoker.deserialize(localVarResponse, "", Products.class);
            } else {
                return null;
            }
        } catch (ApiException ex) {
            throw ex;
        } catch (InterruptedException ex) {
            throw ex;
        } catch (ExecutionException ex) {
            if (ex.getCause() instanceof VolleyError) {
                VolleyError volleyError = (VolleyError) ex.getCause();
                if (volleyError.networkResponse != null) {
                    throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
                }
            }
            throw ex;
        } catch (TimeoutException ex) {
            throw ex;
        }
    }

    /**
     *
     * Returns an array of products

     */
    public void getProducts(final Response.Listener<Products> responseListener, final Response.ErrorListener errorListener) {
        Object postBody = null;


        // create path and map variables
        String path = "/products".replaceAll("\\{format\\}", "json");

        // query params
        List<Pair> queryParams = new ArrayList<Pair>();
        // header params
        Map<String, String> headerParams = new HashMap<String, String>();
        // form params
        Map<String, String> formParams = new HashMap<String, String>();


        String[] contentTypes = {
                "application/json"
        };
        String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


            HttpEntity httpEntity = localVarBuilder.build();
            postBody = httpEntity;
        } else {
            // normal form params
        }

        String[] authNames = new String[]{};

        try {
            apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
                    new Response.Listener<String>() {
                        @Override
                        public void onResponse(String localVarResponse) {
                            try {
                                responseListener.onResponse((Products) ApiInvoker.deserialize(localVarResponse, "", Products.class));
                            } catch (ApiException exception) {
                                errorListener.onErrorResponse(new VolleyError(exception));
                            }
                        }
                    }, new Response.ErrorListener() {
                        @Override
                        public void onErrorResponse(VolleyError error) {
                            errorListener.onErrorResponse(error);
                        }
                    });
        } catch (ApiException ex) {
            errorListener.onErrorResponse(new VolleyError(ex));
        }
    }

    /**
     *
     * Returns &#39;Hello&#39; to the caller
     * @param name The name of the person to whom to say hello
     * @return HelloWorldResponse
     */
    public HelloWorldResponse hello(String name) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
        Object postBody = null;


        // create path and map variables
        String path = "/hello".replaceAll("\\{format\\}", "json");

        // query params
        List<Pair> queryParams = new ArrayList<Pair>();
        // header params
        Map<String, String> headerParams = new HashMap<String, String>();
        // form params
        Map<String, String> formParams = new HashMap<String, String>();

        queryParams.addAll(ApiInvoker.parameterToPairs("", "name", name));


        String[] contentTypes = {
                "application/json"
        };
        String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


            HttpEntity httpEntity = localVarBuilder.build();
            postBody = httpEntity;
        } else {
            // normal form params
        }

        String[] authNames = new String[]{};

        try {
            String localVarResponse = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
            if (localVarResponse != null) {
                return (HelloWorldResponse) ApiInvoker.deserialize(localVarResponse, "", HelloWorldResponse.class);
            } else {
                return null;
            }
        } catch (ApiException ex) {
            throw ex;
        } catch (InterruptedException ex) {
            throw ex;
        } catch (ExecutionException ex) {
            if (ex.getCause() instanceof VolleyError) {
                VolleyError volleyError = (VolleyError) ex.getCause();
                if (volleyError.networkResponse != null) {
                    throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
                }
            }
            throw ex;
        } catch (TimeoutException ex) {
            throw ex;
        }
    }

    /**
     *
     * Returns &#39;Hello&#39; to the caller
     * @param name The name of the person to whom to say hello
     */
    public void hello(String name, final Response.Listener<HelloWorldResponse> responseListener, final Response.ErrorListener errorListener) {
        Object postBody = null;


        // create path and map variables
        String path = "/hello".replaceAll("\\{format\\}", "json");

        // query params
        List<Pair> queryParams = new ArrayList<Pair>();
        // header params
        Map<String, String> headerParams = new HashMap<String, String>();
        // form params
        Map<String, String> formParams = new HashMap<String, String>();

        queryParams.addAll(ApiInvoker.parameterToPairs("", "name", name));


        String[] contentTypes = {
                "application/json"
        };
        String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


            HttpEntity httpEntity = localVarBuilder.build();
            postBody = httpEntity;
        } else {
            // normal form params
        }

        String[] authNames = new String[]{};

        try {
            apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
                    new Response.Listener<String>() {
                        @Override
                        public void onResponse(String localVarResponse) {
                            try {
                                responseListener.onResponse((HelloWorldResponse) ApiInvoker.deserialize(localVarResponse, "", HelloWorldResponse.class));
                            } catch (ApiException exception) {
                                errorListener.onErrorResponse(new VolleyError(exception));
                            }
                        }
                    }, new Response.ErrorListener() {
                        @Override
                        public void onErrorResponse(VolleyError error) {
                            errorListener.onErrorResponse(error);
                        }
                    });
        } catch (ApiException ex) {
            errorListener.onErrorResponse(new VolleyError(ex));
        }
    }

    /**
     *
     * Login
     * @param username
     * @param password
     * @return Costumer
     */
    public Costumer logMe(String username, String password) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
        Object postBody = null;

        // verify the required parameter 'username' is set
        if (username == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'username' when calling logMe",
                    new ApiException(400, "Missing the required parameter 'username' when calling logMe"));
        }

        // verify the required parameter 'password' is set
        if (password == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'password' when calling logMe",
                    new ApiException(400, "Missing the required parameter 'password' when calling logMe"));
        }


        // create path and map variables
        String path = "/costumers".replaceAll("\\{format\\}", "json");

        // query params
        List<Pair> queryParams = new ArrayList<Pair>();
        // header params
        Map<String, String> headerParams = new HashMap<String, String>();
        // form params
        Map<String, String> formParams = new HashMap<String, String>();


        String[] contentTypes = {
                "application/json"
        };
        String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();

            if (username != null) {
                localVarBuilder.addTextBody("username", ApiInvoker.parameterToString(username), ApiInvoker.TEXT_PLAIN_UTF8);
            }

            if (password != null) {
                localVarBuilder.addTextBody("password", ApiInvoker.parameterToString(password), ApiInvoker.TEXT_PLAIN_UTF8);
            }


            HttpEntity httpEntity = localVarBuilder.build();
            postBody = httpEntity;
        } else {
            // normal form params
            formParams.put("username", ApiInvoker.parameterToString(username));
            formParams.put("password", ApiInvoker.parameterToString(password));
        }

        String[] authNames = new String[]{};

        try {
            String localVarResponse = apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
            if (localVarResponse != null) {
                return (Costumer) ApiInvoker.deserialize(localVarResponse, "", Costumer.class);
            } else {
                return null;
            }
        } catch (ApiException ex) {
            throw ex;
        } catch (InterruptedException ex) {
            throw ex;
        } catch (ExecutionException ex) {
            if (ex.getCause() instanceof VolleyError) {
                VolleyError volleyError = (VolleyError) ex.getCause();
                if (volleyError.networkResponse != null) {
                    throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
                }
            }
            throw ex;
        } catch (TimeoutException ex) {
            throw ex;
        }
    }

    /**
     *
     * Login
     * @param username    * @param password
     */
    public void logMe(String username, String password, final Response.Listener<Costumer> responseListener, final Response.ErrorListener errorListener) {
        Object postBody = null;


        // verify the required parameter 'username' is set
        if (username == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'username' when calling logMe",
                    new ApiException(400, "Missing the required parameter 'username' when calling logMe"));
        }

        // verify the required parameter 'password' is set
        if (password == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'password' when calling logMe",
                    new ApiException(400, "Missing the required parameter 'password' when calling logMe"));
        }


        // create path and map variables
        String path = "/costumers".replaceAll("\\{format\\}", "json");

        // query params
        List<Pair> queryParams = new ArrayList<Pair>();
        // header params
        Map<String, String> headerParams = new HashMap<String, String>();
        // form params
        Map<String, String> formParams = new HashMap<String, String>();


        String[] contentTypes = {
                "application/json"
        };
        String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();

            if (username != null) {
                localVarBuilder.addTextBody("username", ApiInvoker.parameterToString(username), ApiInvoker.TEXT_PLAIN_UTF8);
            }

            if (password != null) {
                localVarBuilder.addTextBody("password", ApiInvoker.parameterToString(password), ApiInvoker.TEXT_PLAIN_UTF8);
            }


            HttpEntity httpEntity = localVarBuilder.build();
            postBody = httpEntity;
        } else {
            // normal form params
            formParams.put("username", ApiInvoker.parameterToString(username));
            formParams.put("password", ApiInvoker.parameterToString(password));
        }

        String[] authNames = new String[]{};

        try {
            apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
                    new Response.Listener<String>() {
                        @Override
                        public void onResponse(String localVarResponse) {
                            try {
                                responseListener.onResponse((Costumer) ApiInvoker.deserialize(localVarResponse, "", Costumer.class));
                            } catch (ApiException exception) {
                                errorListener.onErrorResponse(new VolleyError(exception));
                            }
                        }
                    }, new Response.ErrorListener() {
                        @Override
                        public void onErrorResponse(VolleyError error) {
                            errorListener.onErrorResponse(error);
                        }
                    });
        } catch (ApiException ex) {
            errorListener.onErrorResponse(new VolleyError(ex));
        }
    }
}
